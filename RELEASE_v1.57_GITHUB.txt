## Summary

* Fixes a critical bug where running the installer multiple times would create duplicate integration blocks in `ComfyUI-nunchaku/__init__.py`, breaking the plugin.
* Adds three comprehensive safety mechanisms:
  * Marker-based duplicate detection → skip if already installed
  * Backup consolidation → single `.qwen_image_backup` created only once
  * Legacy block removal → handles old-style blocks without markers
* Normal installation/uninstallation flows remain unchanged.

## Problem

* Some users see duplicate integration blocks in `ComfyUI-nunchaku/__init__.py` after running the installer multiple times (e.g., during troubleshooting, updates, or accidental double-clicks).
* Root cause:
  * No duplicate detection existed, so every installer run appended the same integration code
  * Backup file was created by both batch scripts and Python script, causing two backups (`.backup` and `.qwen_image_backup`)
  * Backup could be overwritten on second run, making recovery impossible
  * Old-style blocks (without BEGIN/END markers) couldn't be removed by uninstaller

## Technical Solution

* **Marker-based duplicate detection**: Check for both BEGIN_MARKER and END_MARKER before appending; skip if found
* **Backup consolidation**: Remove backup creation from batch files; only Python script creates `.qwen_image_backup` once
* **Backup creation order**: Check for duplicates BEFORE creating backup, ensure backup contains original state
* **Legacy block removal**: Regex pattern to detect and remove old-style blocks without markers
* **Uninstaller strategy**: Prefer backup restoration, fallback to marker-based removal

## Code Changes

### File 1: `append_integration.py`

**Key edits:**
* Added duplicate detection using BEGIN/END markers
* Ensured backup is created only once (no overwriting)
* Fixed backup creation order (after duplicate check, before append)
* Added error handling for backup creation failures

### Code-level Explanation (with references)

1. **Read file content**

```python
try:
    # Read file content
    with open(init_py_path, 'r', encoding='utf-8') as f:
        content = f.read()
```

Lines 46-48: Opens file and reads entire content into variable for duplicate checking.

2. **Check for duplicate blocks**

```python
    # Check if already installed
    if BEGIN_MARKER in content and END_MARKER in content:
        print("Integration code already present. Skipping.")
        return True
```

Lines 50-53: Searches for both BEGIN and END markers. If both found, exits immediately without modifications.

3. **Create backup only if not exists**

```python
    # Create backup only if not exists and no integration code
    backup_path = init_py_path + ".qwen_image_backup"
    if not os.path.exists(backup_path):
        try:
            shutil.copy2(init_py_path, backup_path)
            print(f"Backup created: {backup_path}")
        except Exception as backup_error:
            print(f"Warning: Could not create backup: {backup_error}")
            # Continue anyway - the block removal function can handle this
```

Lines 55-63: Creates backup with unique name `.qwen_image_backup` only if it doesn't exist. Continues even if backup creation fails.

4. **Append integration code**

```python
    # Append integration code
    with open(init_py_path, 'a', encoding='utf-8') as f:
        if not content.endswith('\n'):
            f.write('\n')
        f.write(integration_code)
    
    print(f"Successfully appended integration code to: {init_py_path}")
    return True
```

Lines 65-72: Appends integration block with BEGIN/END markers. Ensures newline before block.

### File 2: `remove_integration.py` (NEW FILE)

**Key edits:**
* Added legacy block removal for old-style blocks without markers
* Implemented two-stage removal (new-style markers → legacy blocks)
* Clean whitespace handling for proper block removal

1. **Track legacy block comment**

```python
def _remove_legacy_block(text: str) -> tuple[str, int]:
    """Remove old-style integration block without markers."""
    old_comment = "# ComfyUI-QwenImageLoraLoader Integration"
    removed = 0
    
    start = text.find(old_comment)
    if start == -1:
        return text, 0
```

Lines 40-47: Searches for old-style comment marker. Returns if not found.

2. **Match entire block with regex**

```python
    # Find the try-except block that starts after the comment
    pattern = r'# ComfyUI-QwenImageLoraLoader Integration\ntry:.*?except ImportError:.*?logger\.exception\(.*?\)'
    
    match = re.search(pattern, text, re.DOTALL)
```

Line 131: Uses regex with DOTALL to match entire try-except block spanning multiple lines.

3. **Calculate block boundaries and trim**

```python
    if match:
        start_pos = match.start()
        end_pos = match.end()
        
        # Trim leading whitespace from the block
        while start_pos > 0 and text[start_pos - 1] in "\r\n\t ":
            start_pos -= 1
        
        # Remove the block
        text = text[:start_pos].rstrip() + "\n\n" + text[end_pos:].lstrip()
        removed = 1
    
    return text, removed
```

Lines 53-66: Calculates exact boundaries, trims leading whitespace, removes block cleanly.

4. **Remove all blocks (new + legacy)**

```python
def _remove_all_blocks(text: str) -> tuple[str, int]:
    # First, remove new-style blocks with markers
    removed = 0
    start = text.find(BEGIN_MARKER)
    while start != -1:
        stop = text.find(END_MARKER, start)
        if stop == -1:
            break
        stop += len(END_MARKER)
        while stop < len(text) and text[stop] in "\r\n":
            stop += 1
        text = (text[:start].rstrip() + "\n\n" + text[stop:].lstrip())
        removed += 1
        start = text.find(BEGIN_MARKER)
    
    # Then, remove old-style blocks without markers
    text, legacy_removed = _remove_legacy_block(text)
    removed += legacy_removed
    
    return text, removed
```

Lines 70-89: First removes all BEGIN/END marker blocks, then calls legacy removal. Returns total count.

### File 3: `install_qwen_lora.bat` and `install_qwen_lora_portable.bat`

**Key edits:**
* Removed backup creation logic from batch files
* Added duplicate check using `findstr` before calling Python script
* Cleaner separation of concerns (batch handles checks, Python handles backup)

**Global Installer:**

```bat
REM Check if already installed
findstr /C:"ComfyUI-QwenImageLoraLoader Integration" "%NUNCHAKU_PATH%\__init__.py" >nul 2>&1
if %errorlevel% equ 0 (
    echo Already installed. Integration code already exists in __init__.py
    pause
    exit /b 0
)

echo Adding LoRA loader integration code...

REM Append integration code using Python script
py -3 "%LORA_LOADER_PATH%\append_integration.py" "%NUNCHAKU_PATH%\__init__.py"
```

Lines 48-64: Checks for existing integration, exits if found. Calls Python script for actual work.

**Portable Installer:**

```bat
REM Check if already installed
findstr /C:"ComfyUI-QwenImageLoraLoader Integration" "%NUNCHAKU_PATH%\__init__.py" >nul 2>&1
if %errorlevel% equ 0 (
    echo Already installed. Integration code already exists in __init__.py
    pause
    exit /b 0
)

echo Adding LoRA loader integration code...

REM Append integration code using embedded Python
"%PYTHON_CMD%" "%LORA_LOADER_PATH%\append_integration.py" "%NUNCHAKU_PATH%\__init__.py"
```

Lines 75-91: Same duplicate check, uses embedded Python instead of `py -3`.

### File 4: `uninstall_qwen_lora.bat` and `uninstall_qwen_lora_portable.bat`

**Key edits:**
* Unified to `.qwen_image_backup` only (removed `.backup` fallback)
* Two-stage uninstallation (backup restoration → block removal)
* Added portable version with embedded Python support

**Global Uninstaller:**

```bat
echo Checking for backups...

REM Try new-style backup first
if exist "%NUNCHAKU_PATH%\__init__.py.qwen_image_backup" (
    copy "%NUNCHAKU_PATH%\__init__.py.qwen_image_backup" "%NUNCHAKU_PATH%\__init__.py" >nul
    echo Restored from backup: __init__.py.qwen_image_backup
    echo [OK] Qwen Image LoRA Loader integration removed.
    pause
    exit /b 0
)

REM No backup found - remove integration blocks using Python script
echo No backup found. Removing integration blocks...
where py >nul 2>&1
if not errorlevel 1 (
    call py -3 "%SCRIPT_DIR%remove_integration.py"
)

echo [OK] Qwen Image LoRA Loader integration removed.
pause
exit /b 0
```

Lines 23-43: Checks for `.qwen_image_backup`, restores if found, exits. Otherwise calls `remove_integration.py`.

**Portable Uninstaller:**

```bat
echo Checking for backups...

REM Try new-style backup first
if exist "%NUNCHAKU_PATH%\__init__.py.qwen_image_backup" (
    copy "%NUNCHAKU_PATH%\__init__.py.qwen_image_backup" "%NUNCHAKU_PATH%\__init__.py" >nul
    echo Restored from backup: __init__.py.qwen_image_backup
    echo [OK] Qwen Image LoRA Loader integration removed.
    pause
    exit /b 0
)

REM No backup found - remove integration blocks using Python script
echo No backup found. Removing integration blocks...
"%PYTHON_CMD%" "%SCRIPT_DIR%remove_integration.py"

echo.
echo [OK] Qwen Image LoRA Loader integration removed.
pause
exit /b 0
```

Lines 47-74: Same logic, uses embedded Python directly.

## Rationale

* Duplicate detection prevents repeated appending when installer is run multiple times
* Backup consolidation eliminates confusion from multiple backup files
* Checking duplicates before creating backup ensures backup always contains original state
* Legacy block removal handles installations from older versions
* Two-stage uninstallation (backup → removal) provides fallback if backup is missing
* No change to normal execution: when installation is clean, additional checks are dormant

## Expected Impact

* Running installer multiple times is now safe (second run detects and skips)
* Backup protection prevents data loss from overwrites
* Uninstaller works reliably with or without backup
* Backward compatible with old-style blocks
* No changes to UI, node I/O, or normal execution paths

## How to Verify

* Clean installation:
  * Run `install_qwen_lora.bat` or `install_qwen_lora_portable.bat` once
  * Verify `.qwen_image_backup` is created
  * Confirm integration block is added to `__init__.py`
* Duplicate prevention:
  * Run installer second time
  * Verify message "Integration code already present. Skipping."
  * Confirm no additional integration blocks added
* Uninstallation with backup:
  * Run `uninstall_qwen_lora.bat` or `uninstall_qwen_lora_portable.bat`
  * Verify message "Restored from backup"
  * Confirm `__init__.py` is restored to original
* Uninstallation without backup:
  * Delete `.qwen_image_backup` file manually
  * Run uninstaller
  * Verify message "No backup found. Removing integration blocks..."
  * Confirm integration blocks are removed from `__init__.py`

## Acknowledgments

* This update addresses duplicate installation issues reported by users during troubleshooting and updates
* Special thanks to the community for identifying backup corruption patterns

## Links

* Tags page: https://github.com/ussoewwin/ComfyUI-QwenImageLoraLoader/tags
* v1.57 release: https://github.com/ussoewwin/ComfyUI-QwenImageLoraLoader/releases/tag/v1.57

